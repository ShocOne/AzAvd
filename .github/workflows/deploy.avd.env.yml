name: Deploy AVD Environment Friendly

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the beta branch
  push:
    branches: [ beta, '*' ]
  pull_request:
    branches: [ beta, '*']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  rgName: rg-avd-auto-${{ GITHUB.RUN_NUMBER }}
  location: WestEurope

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout
      uses: actions/checkout@v2.4.0
      with:
        # Repository name with owner. For example, actions/checkout
        repository: ''
        path: 'drop'
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        # Artifact name
        name: azModule
        path: drop
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Create test resource group
        id: createRg
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop -Verbose
          $token = Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $url = "https://management.azure.com/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourcegroups/${{ env.rgName }}?api-version=2021-04-01"
          $url
          $body = @{
            location = $location
          } | ConvertTo-Json
          Invoke-WebRequest -Method "PUT" -uri $url -body $body -headers $token
      - name: Deploy AVD Core
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop -Verbose
          Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.core.json -Raw | ConvertFrom-Json -AsHashtable
          $hpParams = $avdParams.hostpool
          $appParams = $avdParams.appgroup
          $wsParams = $avdParams.workspace
          $hp = New-AvdHostpool @hpParams -ResourceGroupName $rgName -Location $location
          $app = New-AvdApplicationGroup @appParams -HostPoolArmPath $hp.id -ResourceGroupName $rgName -Location $location
          $ws = New-AvdWorkspace @wsParams -ApplicationGroupReference $app.id -ResourceGroupName $rgName -Location $location
      - name: Deploy AVD SessionHosts
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop -Verbose
          Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.sessionhosts.json -Raw | ConvertFrom-Json -AsHashtable
          $hpParams = $avdParams.hostpool
          $appParams = $avdParams.appgroup
          $wsParams = $avdParams.workspace
          $shParams = $avdParams.sessionhosts
          $hp = Get-AvdHostpool -hostpoolName $hpParams.HostpoolName -ResourceGroupName $rgName
          $app = Get-AvdApplicationGroup -ApplicationGroupName $appParams.name -ResourceGroupName $rgName
          $ws = Get-AvdWorkspace -Name $wsParams.name -ResourceGroupName $rgName
  retrieve:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Test AVD Core
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop -Verbose
          Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.core.json -Raw | ConvertFrom-Json -AsHashtable
          $hpParams = $avdParams.hostpool
          $appParams = $avdParams.appgroup
          $wsParams = $avdParams.workspace
          $hpTest = Get-AvdHostpool -hostpoolName $hpParams.HostpoolName -ResourceGroupName $rgName
          $appTest = Get-AvdApplicationGroup -ApplicationGroupName $appParams.name -ResourceGroupName $rgName
          $wpTest = Get-AvdWorkspace -Name $wsParams.name -ResourceGroupName $rgName
          get-avdhostpool -resourceId $hpTest.id
          if ($appTest -ne $null) {
            get-avdapplicationgroup -resourceId $appTest.id
          }
          else {
            Write-Error "Application Group not found"
          }
  remove:
    runs-on: ubuntu-latest
    needs: retrieve
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.0
        with:
          name: azModule
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Test AVD Core
        shell: pwsh
        run: |
          Import-Module ./Az.Avd/Az.Avd.psd1 -Force -ErrorAction Stop -Verbose
          Connect-Avd -TenantId ${{ secrets.TENANT_ID }} -ClientID ${{ secrets.CLIENT_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }} -SubscriptionID ${{ secrets.SUBSCRIPTION_ID }}
          $avdParams = Get-Content -Path ./Deploy/deploy.avd.core.json -Raw | ConvertFrom-Json -AsHashtable
          $hpParams = $avdParams.hostpool
          $appParams = $avdParams.appgroup
          $wsParams = $avdParams.workspace
          Remove-AvdWorkspace -Name $wsParams.name -ResourceGroupName $rgName
          Remove-AvdApplicationGroup -Name $appParams.name -ResourceGroupName $rgName
          Remove-AvdHostpool -hostpoolName $hpParams.HostpoolName -ResourceGroupName $rgName

